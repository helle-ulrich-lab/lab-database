# Generated by Django 4.2.4 on 2024-01-28 15:53

import common.models
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('formz', '0082_auto_20230104_1520'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('collection', '0218_auto_20240124_1705'),
    ]

    operations = [
        migrations.CreateModel(
            name='WormStrain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('chromosomal_genotype', models.TextField(blank=True, verbose_name='chromosomal genotype')),
                ('construction', models.TextField(blank=True, verbose_name='construction')),
                ('outcrossed', models.CharField(blank=True, max_length=255, verbose_name='outcrossed')),
                ('growth_conditions', models.CharField(blank=True, max_length=255, verbose_name='growth conditions')),
                ('organism', models.CharField(choices=[('celegans', 'Caenorhabditis elegans'), ('cbriggsae', 'Caenorhabditis briggsae'), ('cinopinata', 'Caenorhabditis inopinata'), ('cjaponica', 'Caenorhabditis japonica'), ('ppacificus', 'Pristionchus pacificus')], default='celegans', max_length=15, verbose_name='organism')),
                ('selection', models.CharField(blank=True, max_length=255, verbose_name='selection')),
                ('phenotype', models.CharField(blank=True, max_length=255, verbose_name='phenotype')),
                ('received_from', models.CharField(blank=True, max_length=255, verbose_name='received from')),
                ('us_e', models.CharField(blank=True, max_length=255, verbose_name='use')),
                ('note', models.CharField(blank=True, max_length=255, verbose_name='note')),
                ('reference', models.CharField(blank=True, max_length=255, verbose_name='reference')),
                ('location_freezer1', models.CharField(blank=True, max_length=10, verbose_name='location Freezer 1')),
                ('location_freezer2', models.CharField(blank=True, max_length=10, verbose_name='location Freezer 2')),
                ('location_backup', models.CharField(blank=True, max_length=10, verbose_name='location Backup')),
                ('created_date_time', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('created_approval_by_pi', models.BooleanField(default=False, verbose_name='record creation approval')),
                ('last_changed_date_time', models.DateTimeField(auto_now=True, verbose_name='last changed')),
                ('last_changed_approval_by_pi', models.BooleanField(default=None, null=True, verbose_name='record change approval')),
                ('approval_by_pi_date_time', models.DateTimeField(default=None, null=True)),
                ('formz_risk_group', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2)], null=True, verbose_name='risk group')),
                ('destroyed_date', models.DateField(blank=True, null=True, verbose_name='destroyed')),
                ('history_integrated_plasmids', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='integrated plasmids')),
                ('history_integrated_oligos', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='integrated oligos')),
                ('history_formz_projects', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='formZ projects')),
                ('history_formz_gentech_methods', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='genTech methods')),
                ('history_formz_elements', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='formz elements')),
                ('history_genotyping_oligos', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='genotyping oligos')),
                ('approval_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='worm_approval_user', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='worm_createdby_user', to=settings.AUTH_USER_MODEL)),
                ('formz_elements', models.ManyToManyField(blank=True, help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>', related_name='worm_formz_element', to='formz.formzbaseelement', verbose_name='elements')),
                ('formz_gentech_methods', models.ManyToManyField(blank=True, help_text='The methods used to create the strain', related_name='worm_gentech_method', to='formz.gentechmethod', verbose_name='genTech methods')),
                ('formz_projects', models.ManyToManyField(related_name='worm_formz_project', to='formz.formzproject', verbose_name='projects')),
                ('integrated_dna_oligos', models.ManyToManyField(blank=True, related_name='worm_integrated_oligo', to='collection.oligo', verbose_name='oligos')),
                ('integrated_dna_plasmids', models.ManyToManyField(blank=True, related_name='worm_integrated_plasmid', to='collection.plasmid', verbose_name='plasmids')),
                ('parent_1', models.ForeignKey(blank=True, help_text='Main parental strain', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='worm_parent_1', to='collection.wormstrain', verbose_name='Parent 1')),
                ('parent_2', models.ForeignKey(blank=True, help_text='Only for crosses', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='worm_parent_2', to='collection.wormstrain', verbose_name='Parent 2')),
            ],
            options={
                'verbose_name': 'strain - Worm',
                'verbose_name_plural': 'strains - Worm',
            },
            bases=(models.Model, common.models.SaveWithoutHistoricalRecord),
        ),
        migrations.CreateModel(
            name='WormStrainGenotypingAssay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locus_allele', models.CharField(max_length=255, verbose_name='locus/allele')),
                ('oligos', models.ManyToManyField(related_name='wormstrain_genotypingassay_oligo', to='collection.oligo')),
                ('worm_strain', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='collection.wormstrain')),
            ],
            options={
                'verbose_name': 'worm strain genotyping assay',
                'verbose_name_plural': 'worm strain genotyping assays',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWormStrain',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('chromosomal_genotype', models.TextField(blank=True, verbose_name='chromosomal genotype')),
                ('construction', models.TextField(blank=True, verbose_name='construction')),
                ('outcrossed', models.CharField(blank=True, max_length=255, verbose_name='outcrossed')),
                ('growth_conditions', models.CharField(blank=True, max_length=255, verbose_name='growth conditions')),
                ('organism', models.CharField(choices=[('celegans', 'Caenorhabditis elegans'), ('cbriggsae', 'Caenorhabditis briggsae'), ('cinopinata', 'Caenorhabditis inopinata'), ('cjaponica', 'Caenorhabditis japonica'), ('ppacificus', 'Pristionchus pacificus')], default='celegans', max_length=15, verbose_name='organism')),
                ('selection', models.CharField(blank=True, max_length=255, verbose_name='selection')),
                ('phenotype', models.CharField(blank=True, max_length=255, verbose_name='phenotype')),
                ('received_from', models.CharField(blank=True, max_length=255, verbose_name='received from')),
                ('us_e', models.CharField(blank=True, max_length=255, verbose_name='use')),
                ('note', models.CharField(blank=True, max_length=255, verbose_name='note')),
                ('reference', models.CharField(blank=True, max_length=255, verbose_name='reference')),
                ('location_freezer1', models.CharField(blank=True, max_length=10, verbose_name='location Freezer 1')),
                ('location_freezer2', models.CharField(blank=True, max_length=10, verbose_name='location Freezer 2')),
                ('location_backup', models.CharField(blank=True, max_length=10, verbose_name='location Backup')),
                ('created_date_time', models.DateTimeField(blank=True, editable=False, verbose_name='created')),
                ('created_approval_by_pi', models.BooleanField(default=False, verbose_name='record creation approval')),
                ('last_changed_date_time', models.DateTimeField(blank=True, editable=False, verbose_name='last changed')),
                ('last_changed_approval_by_pi', models.BooleanField(default=None, null=True, verbose_name='record change approval')),
                ('approval_by_pi_date_time', models.DateTimeField(default=None, null=True)),
                ('formz_risk_group', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2)], null=True, verbose_name='risk group')),
                ('destroyed_date', models.DateField(blank=True, null=True, verbose_name='destroyed')),
                ('history_integrated_plasmids', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='integrated plasmids')),
                ('history_integrated_oligos', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='integrated oligos')),
                ('history_formz_projects', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='formZ projects')),
                ('history_formz_gentech_methods', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='genTech methods')),
                ('history_formz_elements', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='formz elements')),
                ('history_genotyping_oligos', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None, verbose_name='genotyping oligos')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approval_user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_1', models.ForeignKey(blank=True, db_constraint=False, help_text='Main parental strain', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='collection.wormstrain', verbose_name='Parent 1')),
                ('parent_2', models.ForeignKey(blank=True, db_constraint=False, help_text='Only for crosses', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='collection.wormstrain', verbose_name='Parent 2')),
            ],
            options={
                'verbose_name': 'historical strain - Worm',
                'verbose_name_plural': 'historical strains - Worm',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
