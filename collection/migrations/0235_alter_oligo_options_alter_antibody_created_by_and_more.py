# Generated by Django 4.2.4 on 2024-10-28 09:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("formz", "0082_auto_20230104_1520"),
        ("ordering", "0060_alter_orderextradoc_description"),
        (
            "collection",
            "0234_remove_ecolistrain_history_formz_gentech_methods_and_more",
        ),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="oligo",
            options={"verbose_name": "oligo", "verbose_name_plural": "oligos"},
        ),
        migrations.AlterField(
            model_name="antibody",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.CellLineEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="cellline",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="celllineepisomalplasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                blank=True, related_name="%(class)s_projects", to="formz.formzproject"
            ),
        ),
        migrations.AlterField(
            model_name="ecolistrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="ecolistrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="ecolistrain",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="ecolistrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="historicalplasmid",
            name="map",
            field=models.TextField(
                blank=True,
                help_text="only SnapGene .dna files, max. 2 MB",
                max_length=100,
                verbose_name="Map (.dna)",
            ),
        ),
        migrations.AlterField(
            model_name="historicalplasmid",
            name="map_gbk",
            field=models.TextField(
                blank=True,
                help_text="only .gbk or .gb files, max. 2 MB",
                max_length=100,
                verbose_name="Map (.gbk)",
            ),
        ),
        migrations.AlterField(
            model_name="historicalplasmid",
            name="map_png",
            field=models.TextField(
                blank=True, max_length=100, verbose_name="Map image"
            ),
        ),
        migrations.AlterField(
            model_name="inhibitor",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="oligo",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="oligo",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="formz_ecoli_strains",
            field=models.ManyToManyField(
                related_name="%(class)s_ecoli_strains",
                to="collection.ecolistrain",
                verbose_name="e. coli strains",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="map",
            field=models.FileField(
                blank=True,
                help_text="only SnapGene .dna files, max. 2 MB",
                upload_to="collection/plasmid/dna/",
                verbose_name="Map (.dna)",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="map_gbk",
            field=models.FileField(
                blank=True,
                help_text="only .gbk or .gb files, max. 2 MB",
                upload_to="collection/plasmid/gbk/",
                verbose_name="Map (.gbk)",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="map_png",
            field=models.ImageField(
                blank=True,
                upload_to="collection/plasmid/png/",
                verbose_name="Map image",
            ),
        ),
        migrations.AlterField(
            model_name="plasmid",
            name="parent_vector",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_vector",
                to="collection.plasmid",
                verbose_name="parent vector",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="cassette_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tagging and knock out plasmids",
                related_name="%(class)s_cassette_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.SaCerevisiaeStrainEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AlterField(
            model_name="sacerevisiaestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.sacerevisiaestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="cassette_plasmids",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tagging and knock out plasmids",
                related_name="%(class)s_cassette_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="episomal_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmids",
                through="collection.ScPombeStrainEpisomalPlasmid",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="integrated_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.scpombestrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.scpombestrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AlterField(
            model_name="scpombestrainepisomalplasmid",
            name="formz_projects",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_episomal_plasmid_projects",
                to="formz.formzproject",
            ),
        ),
        migrations.AlterField(
            model_name="sirna",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="sirna",
            name="orders",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_order",
                to="ordering.order",
                verbose_name="orders",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="alleles",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_alleles",
                to="collection.wormstrainallele",
                verbose_name="alleles",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="approval_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_approval_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="formz_elements",
            field=models.ManyToManyField(
                blank=True,
                help_text='Use only when an element is not present in the chosen plasmid(s), if any. Searching against the aliases of an element is case-sensitive. <a href="/formz/formzbaseelement/" target="_blank">View all/Change</a>',
                related_name="%(class)s_formz_elements",
                to="formz.formzbaseelement",
                verbose_name="elements",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="formz_gentech_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="The genetic method(s) used to create this record",
                related_name="%(class)s_gentech_methods",
                to="formz.gentechmethod",
                verbose_name="genTech methods",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="formz_projects",
            field=models.ManyToManyField(
                related_name="%(class)s_formz_projects",
                to="formz.formzproject",
                verbose_name="projects",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="integrated_dna_oligos",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_oligos",
                to="collection.oligo",
                verbose_name="oligos",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="integrated_dna_plasmids",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)s_integrated_plasmids",
                to="collection.plasmid",
                verbose_name="plasmids",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="parent_1",
            field=models.ForeignKey(
                blank=True,
                help_text="Main parental strain",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_1",
                to="collection.wormstrain",
                verbose_name="Parent 1",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrain",
            name="parent_2",
            field=models.ForeignKey(
                blank=True,
                help_text="Only for crosses",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_parent_2",
                to="collection.wormstrain",
                verbose_name="Parent 2",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrainallele",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_createdby_user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="wormstrainallele",
            name="made_by_method",
            field=models.ForeignKey(
                help_text="The methods used to create the allele",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_made_by_method",
                to="formz.gentechmethod",
                verbose_name="made by method",
            ),
        ),
        migrations.AlterField(
            model_name="wormstrainallele",
            name="reference_strain",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(class)s_reference_strain",
                to="collection.wormstrain",
                verbose_name="reference strain",
            ),
        ),
        migrations.AlterField(
            model_name="wormstraingenotypingassay",
            name="oligos",
            field=models.ManyToManyField(
                related_name="%(class)s_oligos", to="collection.oligo"
            ),
        ),
    ]
